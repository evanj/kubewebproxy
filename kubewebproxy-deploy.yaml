---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubewebproxy
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "kubewebproxy" to view everything
kind: ClusterRoleBinding
metadata:
  name: kubewebproxy-view
  namespace: default
subjects:
- kind: ServiceAccount
  name: kubewebproxy
  namespace: default
roleRef:
  kind: ClusterRole
  name: view # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
# TLS certificate for https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
apiVersion: networking.gke.io/v1beta1
kind: ManagedCertificate
metadata:
  name: kubewebproxy-certificate
spec:
  domains:
    - kubewebproxy.evanjones.ca
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: kubewebproxy-iap
  namespace: default
spec:
  iap:
    enabled: true
    oauthclientCredentials:
      secretName: iap-secret
  # wait for 2 mins for long-lived connections e.g. pprof profile
  # https://cloud.google.com/kubernetes-engine/docs/how-to/configure-backend-service#creating_a_backendconfig
  timeoutSec: 120
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubewebproxy
  labels:
    app: kubewebproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubewebproxy
  template:
    metadata:
      labels:
        app: kubewebproxy
    spec:
      # necessary to get access to services in the Kubernetes API
      serviceAccountName: kubewebproxy
      containers:
      - name: kubewebproxy
        image: us.gcr.io/gosignin-demo/kubewebproxy:debug16
        args: ["--iapAudience=/projects/660565085864/global/backendServices/5821046762714885080"]

        # necessary since / requires IAP authentication
        # https://cloud.google.com/kubernetes-engine/docs/concepts/ingress#health_checks
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
        ports:
        # must be specified for the custom health check path
        # https://github.com/kubernetes/ingress-gce/issues/241#issuecomment-385038196
        # NOTE: This is very fragile. If it wasn't configured correctly when the ingress was
        # first created, it will not work. You may need to delete and re-add it a few times.
        - containerPort: 8080

        resources:
          requests:
            memory: 64Mi
          limits:
            memory: 128Mi

        # defense in depth: read-only FS; run as nobody/nogroup
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
---
apiVersion: v1
kind: Service
metadata:
  name: kubewebproxy
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    # TODO: just specifying default is documented to work, but it didn't seem to
    beta.cloud.google.com/backend-config: '{"ports": {"http":"kubewebproxy-iap"}, "default": "kubewebproxy-iap"}'
spec:
  type: NodePort
  selector:
    app: kubewebproxy
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: kubewebproxy
  annotations:
    networking.gke.io/managed-certificates: kubewebproxy-certificate
    kubernetes.io/ingress.allow-http: "false"
spec:
  backend:
    serviceName: kubewebproxy
    servicePort: 8080
