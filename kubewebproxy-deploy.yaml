---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubewebproxy
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "kubewebproxy" to view everything
kind: ClusterRoleBinding
metadata:
  name: kubewebproxy-view
  namespace: default
subjects:
- kind: ServiceAccount
  name: kubewebproxy
  namespace: default
roleRef:
  kind: ClusterRole
  name: view # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: kubewebproxy
  # annotations:
  #   kubernetes.io/ingress.allow-http: "false"
spec:
  backend:
    serviceName: kubewebproxy
    servicePort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: kubewebproxy
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: NodePort
  selector:
    app: kubewebproxy
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubewebproxy
  labels:
    app: kubewebproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubewebproxy
  template:
    metadata:
      labels:
        app: kubewebproxy
    spec:
      # necessary to get access to services in the Kubernetes API
      serviceAccountName: kubewebproxy
      containers:
      - name: kubewebproxy
        image: us.gcr.io/gosignin-demo/kubewebproxy:debug2

        resources:
          requests:
            memory: 64Mi
          limits:
            memory: 128Mi

        # defense in depth: read-only FS; run as nobody/nogroup
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
